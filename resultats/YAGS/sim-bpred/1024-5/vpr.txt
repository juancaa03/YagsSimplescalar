sim-bpred: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: ./../../../../sim-bpred -fastfwd 100000000 -max:inst 100000000 -bpred yags -bpred:yags 1 1024 5 0 -redir:sim /home/milax/Escriptori/YagsSimplescalar/resultats/vpr.txt ../../exe/vpr.exe net.in arch.in place.out dum.out -nodisp -place_only -init_t 5 -exit_t 0.005 -alpha_t 0.9412 -inner_num 2 

sim: simulation started @ Tue Nov 19 20:05:29 2024, options follow:

sim-bpred: This simulator implements a branch predictor analyzer.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim     /home/milax/Escriptori/YagsSimplescalar/resultats/vpr.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd            100000000 # number of insts skipped before timing starts
-bpred                   yags # branch predictor type {nottaken|taken|bimod|2lev|comb|yags}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:yags      1 1024 5 0 # yags predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.



sim: ** fast forwarding 100000000 insts **
sim: ** starting functional simulation w/ predictors **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions executed
sim_num_refs               23147910 # total number of loads and stores executed
sim_elapsed_time                 13 # total simulation time in seconds
sim_inst_rate          7692307.6923 # simulation speed (in insts/sec)
sim_num_branches           19702629 # total number of branches executed
sim_IPB                      5.0755 # instruction per branch
bpred_yags.lookups         19702629 # total number of bpred lookups
bpred_yags.updates         19702629 # total number of updates
bpred_yags.addr_hits       18749738 # total number of address-predicted hits
bpred_yags.dir_hits        18750155 # total number of direction-predicted hits (includes addr-hits)
bpred_yags.misses            952474 # total number of misses
bpred_yags.jr_hits          1409144 # total number of address-predicted hits for JR's
bpred_yags.jr_seen          1409179 # total number of JR's seen
bpred_yags.jr_non_ras_hits.PP        13654 # total number of address-predicted hits for non-RAS JR's
bpred_yags.jr_non_ras_seen.PP        13673 # total number of non-RAS JR's seen
bpred_yags.bpred_addr_rate    0.9516 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_yags.bpred_dir_rate    0.9517 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_yags.bpred_jr_rate    1.0000 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_yags.bpred_jr_non_ras_rate.PP    0.9986 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_yags.retstack_pushes      1395504 # total number of address pushed onto ret-addr stack
bpred_yags.retstack_pops      1395506 # total number of address popped off of ret-addr stack
bpred_yags.used_ras.PP      1395506 # total number of RAS predictions used
bpred_yags.ras_hits.PP      1395490 # total number of RAS hits
bpred_yags.ras_rate.PP    1.0000 # RAS prediction rate (i.e., RAS hits/used RAS)

